
on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: 'Resource group name'
        required: true
        default: 'rg-apai'
      resourceGroupNameVMSS:
        description: 'Resource group name for VMSS'
        required: true
        default: 'rg-vmss'
      location:
        description: 'Location'
        required: true
        default: 'australiaeast'
      imageType:
        description: 'Image type'
        required: true
        default: 'UbuntuMinimal'
        type: choice
        options:
          - 'UbuntuMinimal'
          - 'Ubuntu2004'
          - 'Ubuntu2204'
          - 'Windows2019'
          - 'Windows2022'
      generateImage:
        description: 'Generate Image'
        required: true
        default: false
        type: boolean
      createVMSS:
        description: 'Create VMSS'
        required: true
        default: false
        type: boolean
      updateVMSS:
        description: 'Update VMSS'
        required: true
        default: true
        type: boolean
      debugPacker:
        description: 'Debug Packer Image Creation'
        required: true
        default: false
        type: boolean
jobs:
  image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        generateImage: [true, false]
        createVMSS: [true, false]
        updateVMSS: [true, false]

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clone Repository
        if: matrix.generateImage == 'true'
        run: |
          ./.scripts/functions.ps1
          Copy-Repository -workingDirectory ${{ github.workspace }}

      - name: Generate Image
        if: matrix.generateImage == 'true'
        run: |
          $creds = ${{ secrets.AZURE_CREDENTIALS }} | ConvertFrom-Json
          ./.scripts/functions.ps1
          New-Image -workingDirectory ${{ github.workspace }} `
            -subscriptionId $creds.subscriptionId `
            -tenantId $creds.tenantId `
            -servicePrincipalId $creds.clienttId `
            -servicePrincipalKey $creds.clientSecret `
            -resourceGroupName ${{ inputs.resourceGroupName }} `
            -imageType ${{ inputs.imageType }} `
            -location ${{ inputs.location }} `
            -debugPacker ${{ inputs.debugPacker }}

      - name: Create VMSS
        if: matrix.createVMSS == 'true'
        run: |
          ./.scripts/functions.ps1
          New-VMSS -resourceGroupName ${{ inputs.resourceGroupNameVMSS }} -imageType ${{ inputs.imageType }} -location ${{ inputs.location }}

      - name: Update VMSS
        if: matrix.updateVMSS == 'true'
        run: |
          ./.scripts/functions.ps1
          Update-VMSS -resourceGroupNameVMSS ${{ inputs.resourceGroupNameVMSS }} -imageType ${{ inputs.imageType }}
